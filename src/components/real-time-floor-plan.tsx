"use client"

import { useState } from "react"
import {
  Layers,
  Download,
  Share2,
  Loader2,
  Maximize,
  Minimize,
  RotateCw,
  Home,
  Grid3X3,
  Ruler,
  PenTool,
  Undo,
  Redo,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Slider } from "@/components/ui/slider"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { toast } from "sonner"
import { formatCurrency } from "@/lib/unit-utils"

interface LocationData {
  type: string
  region?: string
  country?: string
  state?: string
  city?: string
}

interface RealTimeFloorPlanProps {
  landArea: string
  landAreaUnit?: string
  budget: string
  currency?: string
  location: LocationData
  projectId?: string
}

export function RealTimeFloorPlan({
  landArea,
  landAreaUnit = "sqft",
  budget,
  currency = "USD",
  location,
  projectId,
}: RealTimeFloorPlanProps) {
  const [isGenerating, setIsGenerating] = useState(false)
  const [floorPlanUrl, setFloorPlanUrl] = useState<string | null>(null)
  const [isFullscreen, setIsFullscreen] = useState(false)
  const [zoom, setZoom] = useState(100)
  const [rotation, setRotation] = useState(0)
  const [activeTab, setActiveTab] = useState("2d")
  const [generationProgress, setGenerationProgress] = useState(0)
  const [selectedStyle, setSelectedStyle] = useState("modern")
  const [selectedRooms, setSelectedRooms] = useState({
    bedrooms: 2,
    bathrooms: 2,
    kitchen: true,
    livingRoom: true,
    diningRoom: true,
    study: false,
    patio: false,
  })

  // Calculate appropriate floor plan based on land area
  const getFloorPlanSize = () => {
    // Convert to square meters for consistent comparison
    let areaInSqM = Number.parseFloat(landArea)

    if (landAreaUnit === "acres") {
      areaInSqM *= 4046.86
    } else if (landAreaUnit === "sqft") {
      areaInSqM *= 0.092903
    } else if (landAreaUnit === "hectares") {
      areaInSqM *= 10000
    }

    if (areaInSqM < 100) return "small"
    if (areaInSqM < 250) return "medium"
    return "large"
  }

  // Calculate appropriate style based on budget
  const getBudgetTier = () => {
    // Convert budget to USD for consistent comparison
    const budgetValue = Number.parseFloat(budget.replace(/[^0-9.]/g, ""))

    // Apply rough currency conversion rates for comparison
    // In a real app, you would use a currency conversion API
    const conversionRates: Record<string, number> = {
      USD: 1,
      EUR: 1.1,
      GBP: 1.3,
      INR: 0.012,
      AUD: 0.67,
      CAD: 0.74,
      JPY: 0.0067,
      CNY: 0.14,
      AED: 0.27,
    }

    const rate = conversionRates[currency] || 1
    const budgetInUSD = budgetValue * rate

    if (budgetInUSD < 100000) return "budget"
    if (budgetInUSD < 300000) return "standard"
    return "premium"
  }

  // Get location display text
  const getLocationDisplay = () => {
    if (location.type === "global") {
      return `${location.city || ""}, ${location.country || ""}`
    } else {
      return `${location.city || ""}, ${location.state || ""}`
    }
  }

  const handleGenerateFloorPlan = async () => {
    setIsGenerating(true)
    setGenerationProgress(0)

    // Simulate progress updates
    const interval = setInterval(() => {
      setGenerationProgress((prev) => {
        const newProgress = prev + Math.random() * 15
        return newProgress >= 100 ? 100 : newProgress
      })
    }, 500)

    try {
      // In a real app, this would be an API call to generate the floor plan
      await new Promise((resolve) => setTimeout(resolve, 4000))

      // Select appropriate floor plan based on inputs
      const size = getFloorPlanSize()
      const tier = getBudgetTier()
      const style = selectedStyle
      const bedrooms = selectedRooms.bedrooms

      // For demo purposes, we'll use placeholder images
      // In a real app, these would be generated by an AI service
      let imageUrl

      if (activeTab === "3d") {
        imageUrl = `https://placehold.co/1200x800/3B82F6/FFFFFF/png?text=3D+${style.charAt(0).toUpperCase() + style.slice(1)}+${size.charAt(0).toUpperCase() + size.slice(1)}+Home+(${bedrooms}+BR)`
      } else {
        imageUrl = `https://placehold.co/1200x800/10B981/FFFFFF/png?text=2D+${style.charAt(0).toUpperCase() + style.slice(1)}+${size.charAt(0).toUpperCase() + size.slice(1)}+Floor+Plan+(${bedrooms}+BR)`
      }

      setFloorPlanUrl(imageUrl)

      toast.success("Floor plan generated", {
        description: "Your custom floor plan has been created successfully.",
      })
    } catch (error) {
      console.error("Error generating floor plan:", error)
      toast.error("Generation failed", {
        description: "Failed to generate floor plan. Please try again.",
      })
    } finally {
      clearInterval(interval)
      setGenerationProgress(100)
      setIsGenerating(false)
    }
  }

  const handleDownload = () => {
    if (!floorPlanUrl) return

    const link = document.createElement("a")
    link.href = floorPlanUrl
    link.download = `BuildWise-FloorPlan-${new Date().toISOString().split("T")[0]}.png`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)

    toast.success("Download started", {
      description: "Your floor plan is being downloaded.",
    })
  }

  const handleShare = () => {
    if (!floorPlanUrl) return

    // In a real app, this would generate a shareable link
    navigator.clipboard.writeText(`https://buildwise.ai/shared-floorplan/${projectId || "demo"}`)

    toast.success("Link copied", {
      description: "Shareable link has been copied to clipboard.",
    })
  }

  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen)
  }

  const handleRotate = () => {
    setRotation((prev) => (prev + 90) % 360)
  }

  const handleRoomChange = (room: string, value: any) => {
    setSelectedRooms((prev) => ({
      ...prev,
      [room]: value,
    }))
  }

  return (
    <Card
      className={`${isFullscreen ? "fixed inset-0 z-50 rounded-none" : ""} bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700`}
    >
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <div>
          <CardTitle>Interactive Floor Plan Generator</CardTitle>
          <CardDescription>Customize and generate your ideal floor plan in real-time</CardDescription>
        </div>
        <Button variant="outline" size="icon" onClick={toggleFullscreen}>
          {isFullscreen ? <Minimize className="h-4 w-4" /> : <Maximize className="h-4 w-4" />}
        </Button>
      </CardHeader>

      <CardContent>
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Left sidebar - Controls */}
          <div className="lg:col-span-1 space-y-6">
            <div className="space-y-4">
              <h3 className="text-sm font-medium">House Style</h3>
              <div className="flex flex-wrap gap-2">
                {["modern", "traditional", "minimalist", "industrial", "farmhouse"].map((style) => (
                  <Badge
                    key={style}
                    variant={selectedStyle === style ? "default" : "outline"}
                    className="cursor-pointer capitalize"
                    onClick={() => setSelectedStyle(style)}
                  >
                    {style}
                  </Badge>
                ))}
              </div>
            </div>

            <div className="space-y-4">
              <h3 className="text-sm font-medium">Room Configuration</h3>

              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="text-sm">Bedrooms</span>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="icon"
                      className="h-6 w-6"
                      onClick={() => handleRoomChange("bedrooms", Math.max(1, selectedRooms.bedrooms - 1))}
                    >
                      -
                    </Button>
                    <span className="w-4 text-center">{selectedRooms.bedrooms}</span>
                    <Button
                      variant="outline"
                      size="icon"
                      className="h-6 w-6"
                      onClick={() => handleRoomChange("bedrooms", Math.min(5, selectedRooms.bedrooms + 1))}
                    >
                      +
                    </Button>
                  </div>
                </div>

                <div className="flex justify-between items-center">
                  <span className="text-sm">Bathrooms</span>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="icon"
                      className="h-6 w-6"
                      onClick={() => handleRoomChange("bathrooms", Math.max(1, selectedRooms.bathrooms - 1))}
                    >
                      -
                    </Button>
                    <span className="w-4 text-center">{selectedRooms.bathrooms}</span>
                    <Button
                      variant="outline"
                      size="icon"
                      className="h-6 w-6"
                      onClick={() => handleRoomChange("bathrooms", Math.min(4, selectedRooms.bathrooms + 1))}
                    >
                      +
                    </Button>
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-2">
                {[
                  { id: "kitchen", label: "Kitchen" },
                  { id: "livingRoom", label: "Living Room" },
                  { id: "diningRoom", label: "Dining Room" },
                  { id: "study", label: "Study Room" },
                  { id: "patio", label: "Patio/Balcony" },
                ].map((room) => (
                  <Badge
                    key={room.id}
                    variant={selectedRooms[room.id as keyof typeof selectedRooms] ? "default" : "outline"}
                    className="cursor-pointer justify-center"
                    onClick={() => handleRoomChange(room.id, !selectedRooms[room.id as keyof typeof selectedRooms])}
                  >
                    {room.label}
                  </Badge>
                ))}
              </div>
            </div>

            <div className="space-y-4">
              <h3 className="text-sm font-medium">Project Details</h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-slate-500 dark:text-slate-400">Land Area:</span>
                  <span className="font-medium">
                    {landArea} {landAreaUnit}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-500 dark:text-slate-400">Budget:</span>
                  <span className="font-medium">{formatCurrency(budget, currency)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-500 dark:text-slate-400">Location:</span>
                  <span className="font-medium">{getLocationDisplay()}</span>
                </div>
              </div>
            </div>

            <Button
              className="w-full bg-amber-500 hover:bg-amber-600 text-white"
              onClick={handleGenerateFloorPlan}
              disabled={isGenerating}
            >
              {isGenerating ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating... {Math.round(generationProgress)}%
                </>
              ) : (
                <>
                  <Layers className="mr-2 h-4 w-4" />
                  Generate Floor Plan
                </>
              )}
            </Button>
          </div>

          {/* Right side - Floor plan display */}
          <div className="lg:col-span-3 flex flex-col">
            <Tabs value={activeTab} onValueChange={setActiveTab} className="mb-4">
              <div className="flex justify-between items-center">
                <TabsList>
                  <TabsTrigger value="2d" className="flex items-center gap-1">
                    <Grid3X3 className="h-4 w-4" />
                    2D Floor Plan
                  </TabsTrigger>
                  <TabsTrigger value="3d" className="flex items-center gap-1">
                    <Home className="h-4 w-4" />
                    3D Visualization
                  </TabsTrigger>
                </TabsList>

                {floorPlanUrl && (
                  <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm" onClick={handleRotate}>
                      <RotateCw className="h-4 w-4 mr-1" />
                      Rotate
                    </Button>
                    <Button variant="outline" size="sm" onClick={handleShare}>
                      <Share2 className="h-4 w-4 mr-1" />
                      Share
                    </Button>
                    <Button variant="outline" size="sm" onClick={handleDownload}>
                      <Download className="h-4 w-4 mr-1" />
                      Download
                    </Button>
                  </div>
                )}
              </div>

              <TabsContent value="2d" className="mt-4">
                <div className="relative border border-slate-200 dark:border-slate-700 rounded-lg overflow-hidden bg-slate-100 dark:bg-slate-900 min-h-[400px] flex items-center justify-center">
                  {floorPlanUrl ? (
                    <div className="relative w-full h-full min-h-[400px] flex items-center justify-center overflow-hidden">
                      <img
                        src={floorPlanUrl || "/placeholder.svg"}
                        alt="2D Floor Plan"
                        className="max-w-full max-h-full object-contain transition-all duration-300"
                        style={{
                          transform: `scale(${zoom / 100}) rotate(${rotation}deg)`,
                        }}
                      />

                      <div className="absolute bottom-4 left-4 right-4 flex justify-between items-center bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm p-2 rounded-lg">
                        <div className="flex items-center gap-2">
                          <Button variant="outline" size="icon" onClick={() => setZoom(Math.max(50, zoom - 10))}>
                            <Minimize className="h-4 w-4" />
                          </Button>
                          <Slider
                            value={[zoom]}
                            min={50}
                            max={200}
                            step={10}
                            onValueChange={(value) => setZoom(value[0])}
                            className="w-32"
                          />
                          <Button variant="outline" size="icon" onClick={() => setZoom(Math.min(200, zoom + 10))}>
                            <Maximize className="h-4 w-4" />
                          </Button>
                          <span className="text-xs">{zoom}%</span>
                        </div>

                        <div className="flex items-center gap-2">
                          <Button variant="outline" size="icon">
                            <Undo className="h-4 w-4" />
                          </Button>
                          <Button variant="outline" size="icon">
                            <Redo className="h-4 w-4" />
                          </Button>
                          <Button variant="outline" size="icon">
                            <PenTool className="h-4 w-4" />
                          </Button>
                          <Button variant="outline" size="icon">
                            <Ruler className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center p-8">
                      <Layers className="h-16 w-16 text-slate-300 dark:text-slate-600 mx-auto mb-4" />
                      <h3 className="text-lg font-medium mb-2">No floor plan generated yet</h3>
                      <p className="text-slate-500 dark:text-slate-400 mb-4 max-w-md mx-auto">
                        Customize your preferences and click "Generate Floor Plan" to create a personalized floor plan
                        based on your requirements.
                      </p>
                    </div>
                  )}
                </div>
              </TabsContent>

              <TabsContent value="3d" className="mt-4">
                <div className="relative border border-slate-200 dark:border-slate-700 rounded-lg overflow-hidden bg-slate-100 dark:bg-slate-900 min-h-[400px] flex items-center justify-center">
                  {floorPlanUrl ? (
                    <div className="relative w-full h-full min-h-[400px] flex items-center justify-center overflow-hidden">
                      <img
                        src={floorPlanUrl.replace("2D", "3D") || "/placeholder.svg"}
                        alt="3D Visualization"
                        className="max-w-full max-h-full object-contain transition-all duration-300"
                        style={{
                          transform: `scale(${zoom / 100}) rotate(${rotation}deg)`,
                        }}
                      />

                      <div className="absolute bottom-4 left-4 right-4 flex justify-between items-center bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm p-2 rounded-lg">
                        <div className="flex items-center gap-2">
                          <Button variant="outline" size="icon" onClick={() => setZoom(Math.max(50, zoom - 10))}>
                            <Minimize className="h-4 w-4" />
                          </Button>
                          <Slider
                            value={[zoom]}
                            min={50}
                            max={200}
                            step={10}
                            onValueChange={(value) => setZoom(value[0])}
                            className="w-32"
                          />
                          <Button variant="outline" size="icon" onClick={() => setZoom(Math.min(200, zoom + 10))}>
                            <Maximize className="h-4 w-4" />
                          </Button>
                          <span className="text-xs">{zoom}%</span>
                        </div>

                        <div className="flex items-center gap-2">
                          <Button variant="outline" size="icon">
                            <Undo className="h-4 w-4" />
                          </Button>
                          <Button variant="outline" size="icon">
                            <Redo className="h-4 w-4" />
                          </Button>
                          <Button variant="outline" size="icon">
                            <PenTool className="h-4 w-4" />
                          </Button>
                          <Button variant="outline" size="icon">
                            <Ruler className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center p-8">
                      <Home className="h-16 w-16 text-slate-300 dark:text-slate-600 mx-auto mb-4" />
                      <h3 className="text-lg font-medium mb-2">No 3D visualization yet</h3>
                      <p className="text-slate-500 dark:text-slate-400 mb-4 max-w-md mx-auto">
                        Generate a floor plan first to see a 3D visualization of your home design.
                      </p>
                    </div>
                  )}
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </CardContent>

      <CardFooter className="flex justify-between border-t pt-4">
        <p className="text-sm text-slate-500 dark:text-slate-400">
          Powered by BuildWise AI's advanced floor plan generation technology
        </p>
        {floorPlanUrl && (
          <Badge variant="outline" className="bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300">
            Last updated: Just now
          </Badge>
        )}
      </CardFooter>
    </Card>
  )
}

